@startuml
skinparam monochrome true
skinparam shadowing false
skinparam classAttributeIconSize 0
skinparam DefaultFontName arial
skinparam DefaultFontSize 12
skinparam ClassFontStyle bold
skinparam linetype ortho
skinparam dpi 200
hide empty fields
hide empty methods
hide circle

class OperationalTrafficPlan {
}

class OperationalPlanMovement {
 id: string
 issuedAt: timestamp
 configurationDataVersionRef: string
 includesEndOfJourney: boolean
}

class TrainUnit {
 physicalTrainUnit: PhysicalTrainUnitIdentifier
 nominalRotatingMass: uint32
 regularBrakeWeightPercentage: uint32
 emergencyBrakeWeightPercentage: uint32
 brakePosition: BrakePosition
 brakeModelType: BrakeModelType
 <b>atoGradeAutomation: ATOGradeOfAutomation</b>
 scheduledTrainLength: uint32
 <s>usedGradeOfAutomation: GradeOfAutomation</s>
}

class OperationalTrainCategory {
 trainCategoryType: TrainCategoryType
 description: string
 trainUsage: TrainUsageType
}

class OperationalConsist {
}

class SupportedOnBoardEquipment {
 trainProtectionType: TrainProtectionType
 etcsSystemVersions: string[1..*]
 <s>anyClasses: AnyClass0..*</s>
}

class OnBoardExtension {
 <b>contentType: string</b>
 <b>content: bytes</b>
}

class SpeedRestriction {
 <b>maxSpeed: uint32</b>
 <b>restrictionEndsAtTrainFront: boolean</b>
}

class MovementRestriction {
}

class SpecificMovementRestriction << union >> {
 adhesionCategory: AdhesionCategory
 maxCurrent: uint32
 atoInhibition: boolean
 dasInhibition: boolean
 <s>maxSpeed: uint32</s>
}

class DPSGroupsList {
 dpsGroups: *tp.DriveProtectionSectionGroup[0..*]
}

class MovementEvent {
 id: string
 plannedType: MovementEventType
 scheduledType: MovementEventType
 alignment: AlignmentType
 pathToNextEvent: *infra.LinearElement[0..*]
 scheduledArrival: timestamp
 scheduledArrivalWindow: uint32
}

class OperationalEventRef << union >> {
 movementEvent: *MovementEvent
 restrictionEvent: *RestrictionEvent
 warningMeasureEvent: *WarningMeasureEvent
}

class StopDescription {
 relaxedCoupler: boolean
 holdTrain: boolean
 scheduledDeparture: timestamp
 scheduledMinDwellTime: uint32
}

class AdditionalEventTime {
 timeValue: timestamp
 timeType: TimeType
}

class DoorActivity {
 openingDoorSide: DoorSide
 centralisedOpening: boolean
 automaticClosing: boolean
}

class TrainUnitActivity {
 trainUnitActivityType: TrainUnitActivityType
 actualTrainUnitIndex: uint32
 targetTrainUnitIndex: uint32
}

class PhysicalTrainUnitIdentifier {
 trainRunningNumber: string[0..1]
 additionalTrainRunningNumber: string[0..1]
 tafTapTsiTrainID: string[0..1]
 leadingOnBoardUnitId: string[0..1]
}

class OperationalPlanRestriction {
 id: string
 issuedAt: timestamp
 configurationDataVersionRef: string
}

class RestrictionEvent {
 id: string
 creationTime: timestamp
 removalTime: timestamp
}

class RestrictionArea {
}

class TrainGroupSpec {
 axleLoadCategories: infra.LoadCapabilityLineCategories[0..*]
 cantDeficiencyCategories: infra.CantDeficiencies[0..*]
}

class RestrictedAspect << union >> {
 <b>allowedDrivingModes: OnboardOperatingMode[0..*]</b>
 <b>nonStopping: boolean</b>
 <b>trackClosure: boolean</b>
 <b>operationalRadioHole: boolean</b>
 <b>maxAdhesion: AdhesionCategory</b>
 <b>atoInhibition: boolean</b>
 <b>maxCurrent: uint32</b>
}

class SpecificRestriction {
}

class OperationalPlanWarningMeasure {
 id: string
 issuedAt: timestamp
 configurationDataVersionRef: string
}

class WarningArea {
}

class WarningDevice {
 id: string
 deviceType: DeviceType
}

class WarningMeasureEvent {
 id: string
 creationTime: timestamp
 removalTime: timestamp
}

class ExecutionResponse {
 operationalPlanIssuedAt: timestamp
 issuedAt: timestamp
 responseCode: ResponseCode
 rejectReason: string[0..1]
}

class OperationalPlanReference << union >> {
 operationalPlanMovementRef: *OperationalPlanMovement
 operationalPlanRestrictionRef: *OperationalPlanRestriction
 operationalPlanWarningMeasureRef: *OperationalPlanWarningMeasure
}

class EventExecutionReport << union >> {
}

class MovementEventExecutionReport {
 movementEvent: *MovementEvent
 operationalPlanIssuedAt: timestamp
 issuedAt: timestamp
 executionState: EventExecutionState
 failureReason: string[0..1]
 warning: string[0..1]
}

class RestrictionEventExecutionReport {
 restrictionEvent: *RestrictionEvent
 operationalPlanIssuedAt: timestamp
 issuedAt: timestamp
 executionState: EventExecutionState
 failureReason: string[0..1]
 warning: string[0..1]
}

class WarningMeasureEventExecutionReport {
 warningMeasureEvent: *WarningMeasureEvent
 operationalPlanIssuedAt: timestamp
 issuedAt: timestamp
 executionState: EventExecutionState
 failureReason: string[0..1]
 warning: string[0..1]
}

class TrainUnitReportPE {
 issuedAt: timestamp
 operationalPlanMovement: *OperationalPlanMovement[0..1]
}

class TrainObject {
 obuIdentifier: string
 axleLoadCategory: infra.LoadCapabilityLineCategories
 trainLength: uint32
 safeTrainLength: boolean
 communicationActive: boolean
 trainRunningNumber: string
 vMaxTrain: uint32
 onboardOperatingMode: OnboardOperatingMode
 trainObjectIdentifier: string
 mpRequestedByTrain: boolean
 <b>currentSpeed: uint32</b>
 cantDeficiencyCategory: infra.CantDeficiencies
 <s>speed: uint32</s>
}

class MovementPermission {
 id: string
}

class MpSpeed {
 vMax: uint32
}

class MpDrivingMode {
 drivingMode: OnboardOperatingMode
}

class TrainUnitReportAtoStatus {
 issuedAt: timestamp
 operationalPlanMovement: *OperationalPlanMovement[0..1]
 trainUnitIdentifier: PhysicalTrainUnitIdentifier
 atoState: AtoState
 routingError: boolean
 nextStoppingPointSkip: boolean
 lowAdhesionReportedByDriver: boolean
 operationalConditionsFulfillment: boolean
 isMoving: boolean
 unableToStopAtNextStoppingPoint: boolean
 isSlipping: boolean
 speed: uint32
 trainLength: uint32
 driverId: string[0..1]
}

class EventHandling {
 event: *MovementEvent
 passStopDepart: MovementEventAction
}

class EventEstimation {
 event: *MovementEvent
 arrival: timestamp
}

class TrainUnitReportAtoCapabilities {
 issuedAt: timestamp
 operationalPlanMovement: *OperationalPlanMovement[0..1]
 trainUnitIdentifier: PhysicalTrainUnitIdentifier
 mass: uint32
 outsideTemperature: int32
 passengerLoad: uint32
 lastPassengerExchangeTime: uint32
 elapsedStartPassengerExchange: uint32
}

class EtcsDataAto {
 trainLength: uint32
 maximumSpeed: uint32
 cantDeficiencyCategory: infra.CantDeficiencies
 otherInternationalCategory: infra.OtherSpecificStaticSpeedProfileCategory[0..15]
 axleLoadCategory: infra.LoadCapabilityLineCategories
 nominalRotatingMass: uint32
 brakePercentage: uint32
 preconfiguredBrakingModel: uint32
 brakePosition: BrakePosition
}

class DoorData {
 doorState: DoorState
 lastPassengerExchangeTime: uint32
}

class AdditionalTrainData {
 maxAvailableTractiveEffort: uint32
 maxAvailableTractivePower: uint32
 maxAvailableDynamicBrakeForce: uint32
 maxAvailableDynamicBrakePower: uint32
 maxAvailableServiceBrakeForce: uint32
 regenerativeBrakeState: ActiveState
 magneticShoeBrakeState: ActiveState
 eddyCurrentBrakeState: ActiveState
 electroPneumaticBrakeState: ActiveState
 adhesionIndependentBrakeState: ActiveState
 availableAdhesionCategory: AdhesionCategory
 availableAdhesionPhysicalValue: uint32
}

class PhysicalConsist {
 evnIdentifier: string
 passengerLoad: uint32
 mass: uint32
 maxCurrentConsuption: uint32
}

class PhysicalVehicle {
 evnIdentifier: string
 mass: uint32
 vehicleOrientation: VehicleOrientation
 passengerLoad: uint32
 pantographsStates: PantographState[0..7]
}

class TrackOccupationState {
 id: string
 issuedAt: timestamp
 operationalPlanMovement: *OperationalPlanMovement[0..1]
 trainUnitIdentifier: PhysicalTrainUnitIdentifier[0..1]
 occupationState: EventState
 creationReason: OccupationReason
 recordedTrainLength: uint32
 associatedTrainObject: string[0..1]
}

class DpsGroupState {
 dpsGroup: *tp.DriveProtectionSectionGroup
 issuedAt: timestamp
 operationalPlanMovement: *OperationalPlanMovement[0..1]
 <b>dpsgState: DpsgState</b>
 <s>state: DPSGState</s>
}

class DPSState {
 dps: *tp.DriveProtectionSection
 requestedDrivability: DpsDrivability
 currentDrivability: DpsDrivability
}

class RestrictionAreaState {
 id: string
 issuedAt: timestamp
 restrictionEvent: *RestrictionEvent[0..1]
 restrictionState: RestrictionState
}

class WarningAreaState {
 id: string
 issuedAt: timestamp
 warningMeasureEvent: *WarningMeasureEvent[0..1]
 warningState: EventState
}

OperationalTrafficPlan *-- "0..*" OperationalPlanMovement
OperationalTrafficPlan *-- "0..*" OperationalPlanRestriction
OperationalTrafficPlan *-- "0..*" OperationalPlanWarningMeasure
OperationalPlanMovement *-- "1..*" TrainUnit
OperationalPlanMovement *-- "1..*" MovementEvent
OperationalPlanMovement *-- "0..*" MovementRestriction
TrainUnit *-- "1" OperationalTrainCategory
TrainUnit *-- "1..*" OperationalConsist
OperationalConsist *-- "1" SupportedOnBoardEquipment
SupportedOnBoardEquipment *-- "0..*" OnBoardExtension
MovementRestriction *-- "1" infra.NetLinearReference
MovementRestriction *-- "1" SpecificMovementRestriction
SpecificMovementRestriction *-- "1" SpeedRestriction
SpecificMovementRestriction *-- "1" DPSGroupsList
MovementEvent *-- "1" infra.NetPointReference
MovementEvent *-- "0..1" StopDescription
MovementEvent *-- "0..*" OperationalEventRef
StopDescription *-- "0..*" TrainUnitActivity
StopDescription *-- "0..1" DoorActivity
StopDescription *-- "0..4" AdditionalEventTime
OperationalPlanRestriction *-- "1..*" RestrictionEvent
RestrictionEvent *-- "1" RestrictionArea
RestrictionEvent *-- "0..*" OperationalEventRef
RestrictionArea *-- "1..*" infra.LinearElementSection
RestrictionArea *-- "1..*" SpecificRestriction
RestrictedAspect *-- "1" SpeedRestriction
SpecificRestriction *-- "0..1" TrainGroupSpec
SpecificRestriction *-- "1..*" RestrictedAspect
OperationalPlanWarningMeasure *-- "1..*" WarningMeasureEvent
WarningArea *-- "1" infra.NetAreaReference
WarningArea *-- "1..*" WarningDevice
WarningMeasureEvent *-- "1" WarningArea
WarningMeasureEvent *-- "0..*" OperationalEventRef
ExecutionResponse *-- "1" OperationalPlanReference
EventExecutionReport *-- "1" MovementEventExecutionReport
EventExecutionReport *-- "1" MovementEventExecutionReport
EventExecutionReport *-- "1" RestrictionEventExecutionReport
EventExecutionReport *-- "1" RestrictionEventExecutionReport
EventExecutionReport *-- "1" WarningMeasureEventExecutionReport
EventExecutionReport *-- "1" WarningMeasureEventExecutionReport
TrainUnitReportPE *-- "1" TrainObject
TrainObject *-- "0..1" MovementPermission
TrainObject *-- "1" infra.NetLinearReference
MovementPermission *-- "1" infra.NetLinearReference
MovementPermission *-- "0..*" infra.NetLinearReference
MovementPermission *-- "1" infra.NetLinearReference
MovementPermission *-- "1..*" MpDrivingMode
MovementPermission *-- "1..*" MpSpeed
MpSpeed *-- "1" infra.NetLinearReference
MpDrivingMode *-- "1" infra.NetLinearReference
TrainUnitReportAtoStatus *-- "1" infra.NetPointReference
TrainUnitReportAtoStatus *-- "0..1" EventHandling
TrainUnitReportAtoStatus *-- "0..*" EventEstimation
TrainUnitReportAtoCapabilities *-- "0..1" EtcsDataAto
TrainUnitReportAtoCapabilities *-- "0..1" AdditionalTrainData
TrainUnitReportAtoCapabilities *-- "0..255" PhysicalConsist
PhysicalConsist *-- "0..255" PhysicalVehicle
PhysicalVehicle *-- "0..7" DoorData
PhysicalVehicle *-- "0..7" DoorData
TrackOccupationState *-- "1" infra.NetAreaReference
DpsGroupState *-- "0..*" DPSState
RestrictionAreaState *-- "0..1" RestrictionArea
WarningAreaState *-- "0..1" WarningArea
@enduml