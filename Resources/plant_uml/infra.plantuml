@startuml
skinparam monochrome true
skinparam shadowing false
skinparam classAttributeIconSize 0
skinparam DefaultFontName arial
skinparam DefaultFontSize 12
skinparam ClassFontStyle bold
skinparam linetype ortho
skinparam dpi 200
hide empty fields
hide empty methods
hide circle

class TopoArea {
 id: string
 versionTimestamp: timestamp
 <b>name: string[0..1]</b>
}

class LinearElement {
 id: string
 <b>lengthOfNetLinearElement: uint32</b>
 <b>name: string[0..1]</b>
 <s>lengthOfLinearElement: uint32</s>
}

class NetRelation {
 id: string
 elementA: *LinearElement
 elementB: *LinearElement
 isOnOriginOfElementA: boolean
 isOnOriginOfElementB: boolean
}

class TopologicalCoordinate {
 onLinearElement: *LinearElement
 offsetFromOrigin: uint32
}

class NetPointReference {
 hasTopoCoordinate: TopologicalCoordinate
 appliesToDirection: OrientationDirections
}

class LinearElementSection {
 onElement: *LinearElement
 startOffsetFromOrigin: uint32
 endOffsetFromOrigin: uint32
 appliesInBothDirections: boolean
}

class NetLinearReference {
 startsAt: TopologicalCoordinate
 endsAt: TopologicalCoordinate
 hasSequence: *LinearElement[*]
}

class NetAreaReference {
}

class LinkedArea {
}

class GeometryArea {
 id: string
 versionTimestamp: timestamp
 alignment3d: boolean
}

class LinearElementGeometry {
 id: string
}

class HorizontalSegment << union >> {
}

class HorizontalLine {
 elementGeometryPos: double
 azimuth: double
}

class HorizontalArc {
 elementGeometryPos: double
 azimuth: double
 radius: double
}

class HorizontalTransition {
 elementGeometryPos: double
 azimuth: double
 radius: double
 transitionType: TransitionType
}

class VerticalSegment << union >> {
}

class VerticalLine {
 elementGeometryPos: double
 slope: double
}

class VerticalArc {
 elementGeometryPos: double
 slope: double
 radius: double
 arcType: ArcType
}

class CantPoint {
 elementGeometryPos: double
 appliedCant: double
}

class SampledGeometryArea {
 id: string
 versionTimestamp: timestamp
}

class SampledLinearElementGeometry {
 id: string
}

class SlopeSamplePoint {
 pos: uint32
 samplePointSlope: int32
}

class CantSamplePoint {
 pos: uint32
 samplePointCant: int32
}

class CurveSamplePoint {
 pos: uint32
 sampleCurveRadius: int32
}

class Switch {
 id: string
 reversalTime: uint32
 pointLeft: *NetRelation
 pointRight: *NetRelation
 <b>name: string[0..1]</b>
}

class SlipCrossing {
 id: string
 switches: *Switch[2..4]
 crossing: *Crossing
 <b>name: string[0..1]</b>
}

class Derailer {
 id: string
 netPointReference: NetPointReference
 reversalTime: uint32
 derailToRight: boolean
 <b>name: string[0..1]</b>
}

class Crossing {
 id: string
 topologicalCoordinates: TopologicalCoordinate[2..2]
 isSwitchable: boolean
 <b>name: string[0..1]</b>
}

class BaliseGroup {
 id: string
 nid_bg: uint32
 nid_c: uint32
 bgFunction: BaliseGroupFunction
 linkOrientationDirection: OrientationDirections
}

class Balise {
 id: string
 topologicalCoordinate: TopologicalCoordinate
}

class PropertiesArea {
 id: string
 versionTimestamp: timestamp
 gauge: NominalTrackGauges
 loadingGaugeTypes: LoadingGaugeType[*]
 defaultVoltage: EnergySupplySystems
 defaultMaxCurrent: uint32
}

class LinearElementGauge {
 linearElementSections: LinearElementSection[1..*]
 gauge: NominalTrackGauges
}

class LinearElementLoadingGauge {
 linearElementSections: LinearElementSection[1..*]
 loadingGaugeType: LoadingGaugeType
}

class TrackCondition {
 linearElementSections: LinearElementSection[1..*]
 conditionType: TransmittedTrackConditions
}

class CurrentLimitation {
 linearElementSections: LinearElementSection[1..*]
 maxCurrent: uint32
}

class PermittedBrakingDistance {
 linearElementSections: LinearElementSection[1..*]
 distance: uint32
 brakeType: BrakeType
 gradientValue: int32
 sameDir: boolean
}

class TractionSystem {
 linearElementSections: LinearElementSection[1..*]
 voltageType: EnergySupplySystems
}

class TrackUsageArea {
 id: string
 versionTimestamp: timestamp
 secondaryTracks: *LinearElement[*]
 shuntingTracks: *LinearElement[*]
 preferredSameDir: *LinearElement[*]
 preferredOppositeDir: *LinearElement[*]
}

class LinearElementSpeedProfile {
 id: string
}

class SpeedProfile {
}

class StaticSpeedLimit {
 pos: uint32
 speed: uint32
}

class SpecificStaticSpeedLimit {
 speed: uint32
}

class SpeedLimitCategory << union >> {
 otherCategoryReplacesCantDeficiencySSP: OtherSpecificStaticSpeedProfileCategory
 otherCategoryDoesNotReplaceCantDeficiencySSP: OtherSpecificStaticSpeedProfileCategory
 cantDeficiencyCategory: CantDeficiencies
}

class AxleLoadSpeedProfile {
 startPos: uint32
 endPos: uint32
 speed: uint32
 axleLoadCategory: LoadCapabilityLineCategories
}

class ETCSMarker {
 id: string
 netPointReference: NetPointReference
 markerFunctionStop: boolean
 <b>name: string[0..1]</b>
}

class StopLocation {
 id: string
 netPointReference: NetPointReference
 trainLoadType: TrainLoadType
 doorOpeningSide: DoorOpeningSide
 <b>name: string[0..1]</b>
}

class StopTrainLimit {
 trainMaxLength: uint32
 trainMaxAxles: uint32
 trainMaxWagons: uint32
 trainMaxSize: TrainSize
}

class PlatformEdge {
 platformId: string
 name: string[0..1]
 stopLocations: *StopLocation[1..*]
 <b>platformHeight: PlatformHeights</b>
 <s>height: PlatformHeight</s>
}

class Platform {
 id: string
 name: string[0..1]
}

class OperationalPoint {
 <b>uopid: string</b>
 opName: string[0..1]
 opType: OperationalPointTypes
 <s>uopId: string</s>
}

class TravelTimeMeasurementPoint {
 id: string
 topologicalCoordinate: TopologicalCoordinate
}

class TimingPoint {
 id: string
 topologicalCoordinate: TopologicalCoordinate
 <b>name: string[0..1]</b>
}

class TPActiveObject << union >> {
 etcsMarker: *ETCSMarker
 stopLocation: *StopLocation
 timeMeasurePoint: *TravelTimeMeasurementPoint
}

class Tunnel {
 tunnelIdentification: string
 name: string[0..1]
}

class TunnelTube {
 areaReference: NetAreaReference
 crossSection: uint32
}

class Bridge {
 id: string
 name: string[0..1]
 areaReference: NetAreaReference
}

class Underpass {
 id: string
 name: string[0..1]
 areaReference: NetAreaReference
}

class TvpSection {
 id: string
 name: string[0..1]
 linkedArea: NetAreaReference
 trainDetectors: *TrainDetector[0..*]
}

class TrainDetector {
 id: string
 topologicalCoordinate: TopologicalCoordinate
 trainDetectorType: TrainDetectionSystems
 referenceDir: OrientationDirections
}

class LevelCrossing {
 id: string
 areaReference: NetAreaReference
 <b>name: string[0..1]</b>
}

class NationalBorder {
 id: string
 topologicalCoordinate: TopologicalCoordinate
 fromCountryCode: string
 toCountryCode: string
 <b>name: string[0..1]</b>
}

class BufferStop {
 id: string
 netPointReference: NetPointReference
 isSwitchable: boolean
 <b>name: string[0..1]</b>
}

class FunctionalArea {
 id: string
 versionTimestamp: timestamp
}

class Infrastructure {
}

TopoArea *-- "0..*" LinearElement
TopoArea *-- "0..*" NetRelation
NetAreaReference *-- "1..*" NetLinearReference
LinkedArea *-- "1..*" NetLinearReference
GeometryArea *-- "0..*" LinearElementGeometry
LinearElementGeometry *-- "0..*" HorizontalSegment
LinearElementGeometry *-- "0..*" VerticalSegment
LinearElementGeometry *-- "0..*" CantPoint
HorizontalSegment *-- "1" HorizontalLine
HorizontalSegment *-- "1" HorizontalArc
HorizontalSegment *-- "1" HorizontalTransition
VerticalSegment *-- "1" VerticalLine
VerticalSegment *-- "1" VerticalArc
SampledGeometryArea *-- "1..*" SampledLinearElementGeometry
SampledLinearElementGeometry *-- "1..*" SlopeSamplePoint
SampledLinearElementGeometry *-- "1..*" CurveSamplePoint
SampledLinearElementGeometry *-- "1..*" CantSamplePoint
BaliseGroup *-- "1..8" Balise
PropertiesArea *-- "*" LinearElementSpeedProfile
PropertiesArea *-- "*" LinearElementGauge
PropertiesArea *-- "*" LinearElementLoadingGauge
PropertiesArea *-- "*" TrackCondition
PropertiesArea *-- "*" CurrentLimitation
PropertiesArea *-- "*" PermittedBrakingDistance
PropertiesArea *-- "*" TractionSystem
LinearElementSpeedProfile *-- "1" SpeedProfile
LinearElementSpeedProfile *-- "0..1" SpeedProfile
SpeedProfile *-- "1..*" StaticSpeedLimit
SpeedProfile *-- "0..*" AxleLoadSpeedProfile
StaticSpeedLimit *-- "0..*" SpecificStaticSpeedLimit
SpecificStaticSpeedLimit *-- "1" SpeedLimitCategory
StopLocation *-- "0..1" StopTrainLimit
PlatformEdge *-- "1" NetLinearReference
Platform *-- "1..*" PlatformEdge
OperationalPoint *-- "0..*" TravelTimeMeasurementPoint
OperationalPoint *-- "0..*" Platform
TimingPoint *-- "1" TPActiveObject
Tunnel *-- "1..*" TunnelTube
FunctionalArea *-- "*" OperationalPoint
FunctionalArea *-- "*" Switch
FunctionalArea *-- "*" SlipCrossing
FunctionalArea *-- "*" Derailer
FunctionalArea *-- "*" Crossing
FunctionalArea *-- "*" TrainDetector
FunctionalArea *-- "*" BaliseGroup
FunctionalArea *-- "*" ETCSMarker
FunctionalArea *-- "*" StopLocation
FunctionalArea *-- "*" Tunnel
FunctionalArea *-- "*" Bridge
FunctionalArea *-- "*" Underpass
FunctionalArea *-- "*" TvpSection
FunctionalArea *-- "*" LevelCrossing
FunctionalArea *-- "*" NationalBorder
FunctionalArea *-- "*" BufferStop
FunctionalArea *-- "*" TimingPoint
Infrastructure *-- "*" TopoArea
Infrastructure *-- "*" GeometryArea
Infrastructure *-- "*" SampledGeometryArea
Infrastructure *-- "*" FunctionalArea
Infrastructure *-- "*" PropertiesArea
Infrastructure *-- "*" TrackUsageArea
@enduml